          Python (programming language)   From Wikipedia, the free encyclopedia    Jump to navigation  Jump to search   Python      Paradigm  Object-oriented , imperative , functional , procedural , reflective    Designed by  Guido van Rossum    Developer  Python Software Foundation    First appeared  1990 [1]       Stable release   3.6.5 / 28 March 2018 ; 2 months ago ( 2018-03-28 ) [2] 2.7.15 / 1 May 2018 ; 56 days ago ( 2018-05-01 ) [3]     Preview release   3.7.0b5 [4] / 30 May 2018 ; 27 days ago ( 2018-05-30 )        Typing discipline   Duck , dynamic , strong  since version 3.5:  Gradual [5]    License  Python Software Foundation License    Filename extensions  .py, .pyc, .pyd, .pyo (prior to 3.5), [6] .pyw, .pyz (since 3.5) [7]    Website  www .python .org    Major implementations    CPython , IronPython , Jython , MicroPython , Numba , PyPy , Stackless Python    Dialects    Cython , RPython    Influenced by    ABC , [8]  ALGOL 68 , [9]  C , [10]  C++ , [11]  CLU , [12]  Dylan , [13]  Haskell , [14]  Icon , [15]  Java , [16]  Lisp , [17]  Modula-3 , [11]  Perl    Influenced    Boo , Cobra , Coconut , [18]  CoffeeScript , [19]  D , F# , Falcon , Genie , [20]  Go , Groovy , JavaScript , [21] [22]  Julia , [23]  Nim , Ring , [24]  Ruby , [25]  Swift [26]       Python Programming at Wikibooks      Python is an interpreted  high-level programming language for general-purpose programming . Created by Guido van Rossum and first released in 1991, Python has a design philosophy that emphasizes code readability , notably using significant whitespace . It provides constructs that enable clear programming on both small and large scales. [27]  Python features a dynamic type system and automatic memory management . It supports multiple programming paradigms , including object-oriented , imperative , functional and procedural , and has a large and comprehensive standard library . [28]  Python interpreters are available for many operating systems . CPython , the reference implementation of Python, is open source software [29] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation .     Contents    1  History  2  Features and philosophy  3  Syntax and semantics   3.1  Indentation  3.2  Statements and control flow  3.3  Expressions  3.4  Methods  3.5  Typing  3.6  Mathematics    4  Libraries  5  Development environments  6  Implementations   6.1  Reference implementation  6.2  Other implementations  6.3  Unsupported implementations  6.4  Cross-compilers to other languages  6.5  Performance    7  Development  8  Naming  9  Uses  10  Languages influenced by Python  11  See also  12  References  13  Further reading  14  External links     History [ edit ]      Guido van Rossum , the creator of Python    Main article: History of Python  Python was conceived in the late 1980s, [30] and its implementation began in December 1989 [31] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL ) [32] capable of exception handling and interfacing with the Amoeba operating system. [8] Van Rossum remains Python's principal author. His continuing central role in Python's development is reflected in the title given to him by the Python community: Benevolent Dictator For Life (BDFL).  On the origins of Python, Van Rossum wrote in 1996: [33]   ...In December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix / C  hackers . I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus ).  — Guido van Rossum   Python 2.0 was released on 16 October 2000 and had many major new features, including a cycle-detecting  garbage collector and support for Unicode . With this release, the development process became more transparent and community-backed. [34]  Python 3.0 (initially called Python 3000 or py3k) was released on 3 December 2008 after a long testing period. It is a major revision of the language that is not completely backward-compatible with previous versions. [35] However, many of its major features have been backported to the Python 2.6.x [36] and 2.7.x version series, and releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3. [37]  Python 2.7's end-of-life date was initially set at 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. [38] [39] In January 2017, Google announced work on a Python 2.7 to Go  transcompiler to improve performance under concurrent workloads. [40]  Features and philosophy [ edit ]  Python is a multi-paradigm programming language . Object-oriented programming and structured programming are fully supported, and many of its features support functional programming and aspect-oriented programming (including by metaprogramming [41] and metaobjects (magic methods)). [42] Many other paradigms are supported via extensions, including design by contract [43] [44] and logic programming . [45]  Python uses dynamic typing , and a combination of reference counting and a cycle-detecting garbage collector for memory management . It also features dynamic name resolution ( late binding ), which binds method and variable names during program execution.  Python's design offers some support for functional programming in the Lisp tradition. It has filter() , map() , and reduce() functions; list comprehensions , dictionaries , and sets; and generator expressions. [46] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML . [47]  The language's core philosophy is summarized in the document The Zen of Python ( PEP 20 ), which includes aphorisms such as: [48]   Beautiful is better than ugly  Explicit is better than implicit  Simple is better than complex  Complex is better than complicated  Readability counts   Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC , which espoused the opposite approach. [30]  While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl ) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: "To describe something as 'clever' is not considered a compliment in the Python culture." [49] Python's philosophy rejects the Perl " there is more than one way to do it " approach to language design in favor of "there should be one—and preferably only one—obvious way to do it". [48]  Python's developers strive to avoid premature optimization , and reject patches to non-critical parts of CPython that would offer marginal increases in speed at the cost of clarity. [50] When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use PyPy , a just-in-time compiler . Cython is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.  An important goal of Python's developers is keeping it fun to use. This is reflected in the language's name—a tribute to the British comedy group Monty Python [51] —and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a famous Monty Python sketch ) instead of the standard foo and bar . [52] [53]  A common neologism in the Python community is pythonic , which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic .  Users and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as Pythonists , Pythonistas , and Pythoneers . [54] [55]  Syntax and semantics [ edit ]  Main article: Python syntax and semantics  Python is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than C or Pascal . [56]  Indentation [ edit ]  Main article: Python syntax and semantics § Indentation  Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks . An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. [57] Thus, the program's visual structure accurately represents the program's semantic structure. [1] This feature is also sometimes termed the off-side rule .  Statements and control flow [ edit ]  Python's statements include (among others):   The assignment statement (token '=', the equals sign). This operates differently than in traditional imperative programming languages, and this fundamental mechanism (including the nature of Python's version of variables ) illuminates many other features of the language. Assignment in C , e.g., x = 2 , translates to "typed variable name x receives a copy of numeric value 2". The (right-hand) value is copied into an allocated storage location for which the (left-hand) variable name is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared type . In the simplest case of Python assignment, using the same example, x = 2 , translates to "(generic) name x receives a reference to a separate, dynamically allocated object of numeric (int) type of value 2." This is termed binding the name to the object. Since the name's storage location doesn't contain the indicated value, it is improper to call it a variable . Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., x = 2 ; y = 2 ; z = 2 result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed data type with it. However at a given time a name will be bound to some object, which will have a type; thus there is dynamic typing .  The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).  The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.  The while statement, which executes a block of code as long as its condition is true.  The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits.  The raise statement, used to raise a specified exception or re-raise a caught exception.  The class statement, which executes a block of code and attaches its local namespace to a class , for use in object-oriented programming .  The def statement, which defines a function or method .  The with statement, from Python 2.5 released on September 2006, [58] which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run and releasing the lock afterwards, or opening a file and then closing it), allowing Resource Acquisition Is Initialization (RAII)-like behavior and replaces a common try/finally idiom. [59]  The pass statement, which serves as a NOP . It is syntactically needed to create an empty code block.  The assert statement, used during debugging to check for conditions that ought to apply.  The yield statement, which returns a value from a generator function. From Python 2.5, yield is also an operator. This form is used to implement coroutines .  The import statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: import <module name> [as <alias>] or from <module name> import * or from <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ... .  The print statement was changed to the print() function in Python 3. [60]   Python does not support tail call optimization or first-class continuations , and, according to Guido van Rossum, it never will. [61] [62] However, better support for coroutine -like functionality is provided in 2.5, by extending Python's generators . [63] Before 2.5, generators were lazy  iterators ; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels. [64]  Expressions [ edit ]  Some Python expressions are similar to languages such as C and Java , while some are not:   Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division and integer division. [65] Python also added the ** operator for exponentiation.  From Python 3.5, the new @ infix operator was introduced. It is intended to be used by libraries such as NumPy for matrix multiplication . [66] [67]  In Python, == compares by value, versus Java, which compares numerics by value [68] and objects by reference. [69] (Value comparisons in Java on objects can be performed with the equals() method.) Python's is operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example a <= b <= c .  Python uses the words and , or , not for its boolean operators rather than the symbolic && , || , ! used in Java and C.  Python has a type of expression termed a list comprehension . Python 2.4 extended list comprehensions into a more general expression termed a generator expression . [46]  Anonymous functions are implemented using lambda expressions ; however, these are limited in that the body can only be one expression.  Conditional expressions in Python are written as x if c else y [70] (different in order of operands from the c ? x : y operator common to many other languages).  Python makes a distinction between lists and tuples . Lists are written as [1, 2, 3] , are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as (1, 2, 3) , are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable t initially equal to (1, 2, 3) , executing t = t + (4, 5) first evaluates t + (4, 5) , which yields (1, 2, 3, 4, 5) , which is then assigned back to t , thereby effectively "modifying the contents" of t , while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts. [71]  Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left. [ citation needed ]  Python has a "string format" operator % . This functions analogous to printf format strings in C , e.g. "spam=%s eggs=%d" % ("blah", 2) evaluates to "spam=blah eggs=2" . In Python 3 and 2.6+, this was supplemented by the format() method of the str class, e.g. "spam={0} eggs={1}".format("blah", 2) . Python 3.6 added "f-strings": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}' . [72]  Python has various kinds of string literals :  Strings delimited by single or double quote marks. Unlike in Unix shells , Perl and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash ( \ ) as an escape character . String interpolation became available in Python 3.6 as "formatted string literals". [72]  Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like here documents in shells, Perl and Ruby .  Raw string varieties, denoted by prefixing the string literal with an r . Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows -style paths. Compare " @ -quoting" in C# .    Python has array index and array slicing expressions on lists, denoted as a[key] , a[start:stop] or a[start:stop:step] . Indexes are zero-based , and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride , allows elements to be skipped and reversed. Slice indexes may be omitted, for example a[:] returns a copy of the entire list. Each element of a slice is a shallow copy .   In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp , Scheme , or Ruby . This leads to duplicating some functionality. For example:   List comprehensions vs. for -loops  Conditional expressions vs. if blocks  The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements.   Statements cannot be a part of an expression, so list and other comprehensions or lambda expressions , all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } is syntactically valid (but probably unintended) C code but if c = 1: ... causes a syntax error in Python.  Methods [ edit ]  Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument) . Python methods have an explicit self parameter to access instance data , in contrast to the implicit self (or this ) in some other object-oriented programming languages (e.g., C++ , Java , Objective-C , or Ruby ). [73]  Typing [ edit ]  Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time ; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed , Python is strongly typed , forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.  Python allows programmers to define their own types using classes , which are most often used for object-oriented programming . New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass() ), and the classes are instances of the metaclass  type (itself an instance of itself), allowing metaprogramming and reflection .  Before version 3.0, Python had two kinds of classes: old-style and new-style . [74] The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type ). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.  The long term plan is to support gradual typing [75] and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named mypy supports compile-time type checking. [76]   Summary of Python 3's built-in types   Type  mutable  Description  Syntax example    bool  immutable  Boolean value  True  False    bytearray  mutable  Sequence of bytes  bytearray(b'Some ASCII')  bytearray(b"Some ASCII")  bytearray([119, 105, 107, 105])    bytes  immutable  Sequence of bytes  b'Some ASCII'  b"Some ASCII"  bytes([119, 105, 107, 105])    complex  immutable  Complex number with real and imaginary parts  3+2.7j    dict  mutable  Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type  {'key1': 1.0, 3: False}    ellipsis   An ellipsis placeholder to be used as an index in NumPy arrays  ...    float  immutable  Floating point number, system-defined precision  3.1415927    frozenset  immutable  Unordered set , contains no duplicates; can contain mixed types, if hashable  frozenset([4.0, 'string', True])    int  immutable  Integer of unlimited magnitude [77]  42    list  mutable  List , can contain mixed types  [4.0, 'string', True]    set  mutable  Unordered set , contains no duplicates; can contain mixed types, if hashable  {4.0, 'string', True}    str  immutable  A character string : sequence of Unicode codepoints  'Wikipedia'  "Wikipedia"  """Spanning multiple lines"""    tuple  immutable  Can contain mixed types  (4.0, 'string', True)    Mathematics [ edit ]  Python has the usual C arithmetic operators ( + , - , * , / , % ). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0 , and a new matrix multiply @ operator is included in version 3.5. [78] Additionally, it has a unary operator ( ~ ), which essentially inverts all the bits of its one argument. For integers, this means ~x=-x-1 . [79] Other operators include bitwise shift operators x << y , which shifts x to the left y places, the same as x*(2**y) , and x >> y , which shifts x to the right y places, the same as x//(2**y) . [80]  The behavior of division has changed significantly over time: [81] [ why? ]   Python 2.1 and earlier use the C division behavior. The / operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. 7/3 == 2 and -7/3 == -2 .  Python 2.2 changes integer division to round towards negative infinity, e.g. 7/3 == 2 and -7/3 == -3 . The floor division // operator is introduced. So 7//3 == 2 , -7//3 == -3 , 7.5//3 == 2.0 and -7.5//3 == -3.0 . Adding from __future__ import division causes a module to use Python 3.0 rules for division (see next).  Python 3.0 changes / to be always floating-point division. In Python terms, the pre-3.0 / is classic division , the version-3.0 / is real division , and // is floor division .   Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a . However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b ), where b is a positive integer, it has to lie in the interval ( b , 0] when b is negative. [82]  Python provides a round function for rounding a float to the nearest integer. For tie-breaking , versions before 3 use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0. [83] Python 3 uses round to even : round(1.5) is 2, round(2.5) is 2. [84]  Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c . [85] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b , resulting in 0 or 1, and that result would then be compared with c . [86]  Python has extensive built-in support for arbitrary precision arithmetic . Integers are transparently switched from the machine-supported maximum fixed-precision (usually 32 or 64 bits), belonging to the python type int , to arbitrary precision, belonging to the Python type long , where needed. The latter have an "L" suffix in their textual representation. [87] (In Python 3, the distinction between the int and long types was eliminated; this behavior is now entirely contained by the int class.) The Decimal type/class in module decimal (since version 2.4) provides decimal floating point numbers to arbitrary precision and several rounding modes. [88] The Fraction type in module fractions (since version 2.6) provides arbitrary precision for rational numbers. [89]  Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation. [ citation needed ]  Libraries [ edit ]  Python's large standard library , commonly cited as one of its greatest strengths, [90] provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces , connecting to relational databases , generating pseudorandom numbers , arithmetic with arbitrary precision decimals, [91] manipulating regular expressions , and unit testing .  Some parts of the standard library are covered by specifications (for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333 [92] ), but most modules are not. They are specified by their code, internal documentation, and test suites (if supplied). However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.  As of March 2018, [update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 130,000 [93] packages with a wide range of functionality, including:   Graphical user interfaces  Web frameworks  Multimedia  Databases  Networking  Test frameworks  Automation  Web scraping [94]  Documentation  System administration  Scientific computing  Text processing  Image processing   Development environments [ edit ]  See also: Comparison of integrated development environments § Python  Most Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which the user enters statements sequentially and receives results immediately.  Other shells, including IDLE and IPython , add further abilities such as auto-completion, session state retention and syntax highlighting .  As well as standard desktop integrated development environments (see Wikipedia's " Python IDE " article), there are Web browser -based IDEs; SageMath (intended for developing science and math-related Python programs); PythonAnywhere , a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing scientific computing. [95]  Implementations [ edit ]  See also: List of Python software § Python implementations  Reference implementation [ edit ]  CPython is the reference implementation of Python. It is written in C , meeting the C89 standard with several select C99 features. [96] It compiles Python programs into an intermediate bytecode [97] which is then executed by its virtual machine . [98] CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including Windows and most modern Unix-like systems. Platform portability was one of its earliest priorities. [99]  Other implementations [ edit ]  PyPy is a fast, compliant [100] interpreter of Python 2.7 and 3.5. Its just-in-time compiler brings a significant speed improvement over CPython. [101]  Stackless Python is a significant fork of CPython that implements microthreads ; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version. [102]  MicroPython and CircuitPython are Python 3 variants optimised for microcontrollers .  Unsupported implementations [ edit ]  Other just-in-time Python compilers have been developed, but are now unsupported:   Google began a project named Unladen Swallow in 2009 with the aim of speeding up the Python interpreter fivefold by using the LLVM , and of improving its multithreading ability to scale to thousands of cores. [103]  Psyco is a just-in-time  specialising compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialised for certain data types and is faster than standard Python code.   In 2005, Nokia released a Python interpreter for the Series 60 mobile phones named PyS60 . It includes many of the modules from the CPython implementations and some additional modules to integrate with the Symbian operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device. [104]  Cross-compilers to other languages [ edit ]  There are several compilers to high-level object languages , with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:   Jython compiles into Java byte code, which can then be executed by every Java virtual machine implementation. This also enables the use of Java class library functions from the Python program.  IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime .  The RPython language can be compiled to C , Java bytecode , or Common Intermediate Language , and is used to build the PyPy interpreter of Python.  Pyjs compiles Python to JavaScript .  Cython compiles Python to C and C++ .  Pythran compiles Python to C++ .  Somewhat dated Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.  Google's Grumpy compiles Python to Go .  Nuitka compiles Python into C++ [105]   Performance [ edit ]  A performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13. [106]  Development [ edit ]  Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions. [107] Outstanding PEPs are reviewed and commented on by the Python community and Guido Van Rossum, Python's Benevolent Dictator For Life . [107]  Enhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues are discussed in the Roundup  bug tracker maintained at python.org. [108] Development originally took place on a self-hosted source-code repository running Mercurial , until Python moved to GitHub in January 2017. [109]  CPython's public releases come in three types, distinguished by which part of the version number is incremented:   Backward-incompatible versions, where code is expected to break and need to be manually ported . The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.  Major or "feature" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release. [110]  Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented. [111]   Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development, and using the BuildBot  continuous integration system. [112]  The community of Python developers has also contributed over 86,000 [113] software modules (as of 20 August 2016 [update] ) to the Python Package Index (PyPI), the official repository of third-party Python libraries.  The major academic conference on Python is PyCon . There are also special Python mentoring programmes, such as Pyladies .  Naming [ edit ]  Python's name is derived from the British comedy group Monty Python , whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; [114] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar . [114] [115] The official Python documentation also contains various references to Monty Python routines. [116] [117]  The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame , a binding of SDL to Python (commonly used to create games); PyQt and PyGTK , which bind Qt and GTK to Python respectively; and PyPy , a Python implementation originally written in Python.  Uses [ edit ]  Main article: List of Python software  Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where, as of January 2018 [update] , it is the fourth most popular language (behind Java , C , and C++ ). [118] It was selected Programming Language of the Year in 2007 and 2010. [119]  An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++". [120]  Large organizations that use Python include Wikipedia , Google , [121]  Yahoo! , [122]  CERN , [123]  NASA , [124]  Facebook , [125]  Amazon , Instagram , Spotify [ citation needed ] and some smaller entities like ILM [126] and ITA . [127] The social news networking site Reddit is written entirely in Python.  Python can serve as a scripting language for web applications , e.g., via mod_wsgi for the Apache web server . [128] With Web Server Gateway Interface , a standard API has evolved to facilitate these applications. Web frameworks like Django , Pylons , Pyramid , TurboGears , web2py , Tornado , Flask , Bottle and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox .  Libraries such as NumPy , SciPy and Matplotlib allow the effective use of Python in scientific computing, [129] [130] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a mathematical software with a " notebook " programmable in Python: its library covers many aspects of mathematics , including algebra , combinatorics , numerical mathematics , number theory , and calculus .  Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus , 3D parametric modeler like FreeCAD , 3D animation packages such as 3ds Max , Blender , Cinema 4D , Lightwave , Houdini , Maya , modo , MotionBuilder , Softimage , the visual effects compositor Nuke , 2D imaging programs like GIMP , [131]  Inkscape , Scribus and Paint Shop Pro , [132] and musical notation programs like scorewriter and capella . GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS . [133] It has also been used in several video games, [134] [135] and has been adopted as first of the three available programming languages in Google App Engine , the other two being Java and Go . [136] Python is also used in algorithmic trading and quantitative finance. [137] Python can also be implemented in APIs of online brokerages that run on other languages by using wrappers. [138]  Python has been used in artificial intelligence projects. [139] [140] [141] [142] As a scripting language with modular architecture , simple syntax and rich text processing tools, Python is often used for natural language processing . [143]  Many operating systems include Python as a standard component. It ships with most Linux distributions , AmigaOS 4 , FreeBSD , NetBSD , OpenBSD and macOS , and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use the Anaconda installer. Gentoo Linux uses Python in its package management system , Portage .  Python is used extensively in the information security industry, including in exploit development. [144] [145]  Most of the Sugar software for the One Laptop per Child XO, now developed at Sugar Labs , is written in Python. [146]  The Raspberry Pi  single-board computer project has adopted Python as its main user-programming language.  LibreOffice includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature [147] since Version 4.0 from 7 February 2013.  Languages influenced by Python [ edit ]  Python's design and philosophy have influenced many other programming languages:   Boo uses indentation, a similar syntax, and a similar object model. [148]  Cobra uses indentation and a similar syntax, and its "Acknowledgements" document lists Python first among languages that influenced it. [149] However, Cobra directly supports design-by-contract , unit tests , and optional static typing . [150]  CoffeeScript , a programming language that cross-compiles to JavaScript, has Python-inspired syntax.  ECMAScript borrowed iterators and generators from Python. [151]  Go is designed for the "speed of working in a dynamic language like Python" [152] and shares the same syntax for slicing arrays.  Groovy was motivated by the desire to bring the Python design philosophy to Java . [153]  Julia was designed "with true macros [.. and to be] as usable for general programming as Python [and] should be as fast as C". [23] Calling to or from Julia is possible; to with PyCall.jl and a Python package pyjulia allows calling, in the other direction, from Python.  Kotlin (programming language) is a functional programming language with an interactive shell similar to python. However, Kotlin is strongly typed with access to standard Java libraries. [154]  Ruby 's creator, Yukihiro Matsumoto , has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language." [155]  Swift , a programming language developed by Apple, has some Python-inspired syntax. [156]  GDScript , dynamically typed programming language used to create video-games. It is extremely similar to Python with a few minor differences.   Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl [157] and Erlang . [158]  Python received TIOBE's Programming Language of the Year awards in 2007 and 2010. The award is given to the language with the greatest growth in popularity over the year, as measured by the TIOBE index . [159]  See also [ edit ]    Free software portal  Python programming portal     History of Python  Comparison of integrated development environments for Python  Comparison of programming languages  List of programming languages  pip (package manager)  Off-side rule   References [ edit ]    ^ a  b  Guttag, John V. (2016-08-12). Introduction to Computation and Programming Using Python: With Application to Understanding Data . MIT Press. ISBN  978-0-262-52962-4 .   ^  Deily, Ned (28 March 2018). "Python 3.6.5 is now available" . Python Insider . The Python Core Developers . Retrieved 29 March 2018 .   ^  Peterson, Benjamin (1 May 2018). "Python 2.7.15 released" . Python Insider . The Python Core Developers . Retrieved 1 May 2018 .   ^  "Python Release Python 3.7.0b5" . Python.org . Retrieved 2018-05-30 .   ^  "PEP 483 -- The Theory of Type Hints" . Python.org .   ^  File extension .pyo was removed in Python 3.5. See PEP 0488  ^  Holth, Moore (30 March 2014). "PEP 0441 -- Improving Python ZIP Application Support" . Retrieved 12 November 2015 .   ^ a  b  "Why was Python created in the first place?" . General Python FAQ . Python Software Foundation . Retrieved 22 March 2007 .   ^  Kuchling, Andrew M. (22 December 2006). "Interview with Guido van Rossum (July 1998)" . amk.ca . Archived from the original on 1 May 2007 . Retrieved 12 March 2012 .   ^  van Rossum, Guido (1993). "An Introduction to Python for UNIX/C Programmers" . Proceedings of the NLUUG najaarsconferentie (Dutch UNIX users group) . even though the design of C is far from ideal, its influence on Python is considerable.   ^ a  b  "Classes" . The Python Tutorial . Python Software Foundation . Retrieved 20 February 2012 . It is a mixture of the class mechanisms found in C++ and Modula-3   ^  Lundh, Fredrik. "Call By Object" . effbot.org . Retrieved 21 November 2017 . replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.   ^  Simionato, Michele. "The Python 2.3 Method Resolution Order" . Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers   ^  Kuchling, A. M. "Functional Programming HOWTO" . Python v2.7.2 documentation . Python Software Foundation . Retrieved 9 February 2012 .   ^  Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). "PEP 255 – Simple Generators" . Python Enhancement Proposals . Python Software Foundation . Retrieved 9 February 2012 .   ^  Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (2 September 2004). "PEP 318 – Decorators for Functions and Methods" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 February 2012 .   ^  "More Control Flow Tools" . Python 3 documentation . Python Software Foundation . Retrieved 24 July 2015 .   ^  Hubinger, Evan. "Coconut Programming Language" . coconut-lang.org . Retrieved 18 August 2017 .   ^  "CoffeeScript borrows chained comparisons from Python" .   ^  "Genie Language - A brief guide" . Retrieved 28 December 2015 .   ^  "Perl and Python influences in JavaScript" . www.2ality.com . 24 February 2013 . Retrieved 15 May 2015 .   ^  Rauschmayer, Axel. "Chapter 3: The Nature of JavaScript; Influences" . O'Reilly, Speaking JavaScript . Retrieved 15 May 2015 .   ^ a  b  "Why We Created Julia" . Julia website . February 2012 . Retrieved 5 June 2014 .   ^  Ring Team (4 December 2017). "Ring and other languages" . ring-lang.net . ring-lang .   ^  Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform . Berkeley: APress. p. 3. ISBN  978-1-59059-881-8 .   ^  Lattner, Chris (3 June 2014). "Chris Lattner's Homepage" . Chris Lattner . Retrieved 3 June 2014 . The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.   ^  Kuhlman, Dave. "A Python Book: Beginning Python, Advanced Python, and Python Exercises" . Archived from the original on 23 June 2012.   ^  "About Python" . Python Software Foundation . Retrieved 24 April 2012 .  , second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files."  ^  "History and License" . Retrieved 5 December 2016 .  "All Python releases are Open Source"  ^ a  b  Venners, Bill (13 January 2003). "The Making of Python" . Artima Developer . Artima . Retrieved 22 March 2007 .   ^  van Rossum, Guido (20 January 2009). "A Brief Timeline of Python" . The History of Python . Google . Retrieved 20 January 2009 .   ^  van Rossum, Guido (29 August 2000). "SETL (was: Lukewarm about range literals)" . Python-Dev (Mailing list) . Retrieved 13 March 2011 .   ^  van Rossum, Guido (1996). "Foreword for "Programming Python" (1st ed.)" . Retrieved 10 July 2014 .   ^  Kuchling, A. M.; Zadka, Moshe (16 October 2000). "What's New in Python 2.0" . Python Software Foundation . Retrieved 11 February 2012 .   ^  "Python 3.0 Release" . Python Software Foundation . Retrieved 8 July 2009 .   ^  van Rossum, Guido (5 April 2006). "PEP 3000 – Python 3000" . Python Enhancement Proposals . Python Software Foundation . Retrieved 27 June 2009 .   ^  "Automated Python 2 to 3 code translation — Python Documentation" . Retrieved 11 February 2018 .   ^  "PEP 373 -- Python 2.7 Release Schedule" . python.org . Retrieved 9 January 2017 .   ^  "PEP 466 -- Network Security Enhancements for Python 2.7.x" . python.org . Retrieved 9 January 2017 .   ^  "Google Open Source Blog: Grumpy: Go running Python!" . 4 January 2017 . Retrieved 7 March 2017 .   ^  The Cain Gang Ltd. "Python Metaclasses: Who? Why? When?"  (PDF) . Archived from the original  (PDF) on 10 December 2009 . Retrieved 27 June 2009 .   ^  "3.3. Special method names" . The Python Language Reference . Python Software Foundation . Retrieved 27 June 2009 .   ^  "PyDBC: method preconditions, method postconditions and class invariants for Python" . Retrieved 24 September 2011 .   ^  "Contracts for Python" . Retrieved 24 September 2011 .   ^  "PyDatalog" . Retrieved 22 July 2012 .   ^ a  b  Hettinger, Raymond (30 January 2002). "PEP 289 – Generator Expressions" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 .   ^  "6.5 itertools – Functions creating iterators for efficient looping" . Docs.python.org . Retrieved 22 November 2016 .   ^ a  b  Peters, Tim (19 August 2004). "PEP 20 – The Zen of Python" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 .   ^  Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition . O'Reilly Media . p. 230. ISBN  978-0-596-00797-3 .   ^  "Python Culture" .   ^  "General Python FAQ" . Python v2.7.3 documentation . Docs.python.org . Retrieved 3 December 2012 .   ^  "15 Ways Python Is a Powerful Force on the Web" .   ^  "pprint - Data pretty printer - Python Documentation" .   ^  Goodger, David. "Code Like a Pythonista: Idiomatic Python" .   ^  "How to think like a Pythonista" .   ^  "Is Python a good language for beginning programmers?" . General Python FAQ . Python Software Foundation . Retrieved 21 March 2007 .   ^  "Myths about indentation in Python" . Secnetix.de . Retrieved 19 April 2011 .   ^  "Python 2.5 Release" . Python.org .   ^  "Highlights: Python 2.5" . Python.org .   ^  Sweigart, Al (2010). "Appendix A: Differences Between Python 2 and 3". Invent Your Own Computer Games with Python (2 ed.). ISBN  978-0-9821060-1-3 . Retrieved 20 February 2014 .   ^  van Rossum, Guido (22 April 2009). "Tail Recursion Elimination" . Neopythonic.blogspot.be . Retrieved 3 December 2012 .   ^  van Rossum, Guido (9 February 2006). "Language Design Is Not Just Solving Puzzles" . Artima forums . Artima . Retrieved 21 March 2007 .   ^  van Rossum, Guido; Eby, Phillip J. (10 May 2005). "PEP 342 – Coroutines via Enhanced Generators" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 .   ^  "PEP 380" . Python.org . Retrieved 3 December 2012 .   ^  "division" . python.org .   ^  "PEP 0465 -- A dedicated infix operator for matrix multiplication" . python.org . Retrieved 1 January 2016 .   ^  "Python 3.5.1 Release and Changelog" . python.org . Retrieved 1 January 2016 .   ^  "Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=" . Oracle Corporation . Retrieved 28 August 2016 .   ^  "Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=" . Oracle Corporation . Retrieved 28 August 2016 .   ^  van Rossum, Guido; Hettinger, Raymond (7 February 2003). "PEP 308 – Conditional Expressions" . Python Enhancement Proposals . Python Software Foundation . Retrieved 13 July 2011 .   ^  "4. Built-in Types — Python 3.6.3rc1 documentation" . python.org . Retrieved 1 October 2017 .   ^ a  b  "PEP 498 -- Literal String Interpolation" . python.org . Retrieved 8 March 2017 .   ^  "Why must 'self' be used explicitly in method definitions and calls?" . Design and History FAQ . Python Software Foundation . Retrieved 19 February 2012 .   ^  "The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1" . Retrieved 12 January 2011 .   ^  "Type hinting for Python" . LWN.net. 24 December 2014 . Retrieved 5 May 2015 .   ^  "mypy - Optional Static Typing for Python" . Retrieved 28 January 2017 .   ^  Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 237 – Unifying Long Integers and Integers" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 September 2011 .   ^  "PEP 465 -- A dedicated infix operator for matrix multiplication" . python.org .   ^  "The tilde operator in Python - Stackoverflow" . stackoverflow.com .   ^  "BitwiseOperators - Python Wiki" . wiki.python.org .   ^  Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 238 – Changing the Division Operator" . Python Enhancement Proposals . Python Software Foundation . Retrieved 23 October 2013 .   ^  "Why Python's Integer Division Floors" . Retrieved 25 August 2010 .   ^  "round" , The Python standard library, release 2.7, §2: Built-in functions , retrieved 14 August 2011   ^  "round" , The Python standard library, release 3.2, §2: Built-in functions , retrieved 14 August 2011   ^  Beazley, David M. (2009). Python Essential Reference (4th ed.). p. 66.   ^  Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206.   ^  "Built-in Type" . docs.python.org .   ^  Batista, Facundo. "PEP 0327 -- Decimal Data Type" . Python.org . Retrieved 26 September 2015 .   ^  "What's New in Python 2.6 — Python v2.6.9 documentation" . docs.python.org . Retrieved 26 September 2015 .   ^  Piotrowski, Przemyslaw (July 2006). "Build a Rapid Web Development Environment for Python Server Pages and Oracle" . Oracle Technology Network . Oracle . Retrieved 12 March 2012 .   ^  Batista, Facundo (17 October 2003). "PEP 327 – Decimal Data Type" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 .   ^  Eby, Phillip J. (7 December 2003). "PEP 333 – Python Web Server Gateway Interface v1.0" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 .   ^  Debill, Erik. "Module Counts" . ModuleCounts . Retrieved 20 September 2017 .   ^  "20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks" . likegeeks.com . 5 December 2017 . Retrieved 12 March 2018 .   ^  Enthought, Canopy. "Canopy" . www.enthought.com . Retrieved 20 August 2016 .   ^  van Rossum, Guido (5 June 2001). "PEP 7 – Style Guide for C Code" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 .   ^  "CPython byte code" . Docs.python.org . Retrieved 16 February 2016 .   ^  "Python 2.5 internals"  (PDF) . Retrieved 19 April 2011 .   ^  "An Interview with Guido van Rossum" . Oreilly.com . Retrieved 24 November 2008 .   ^  "PyPy compatibility" . Pypy.org . Retrieved 3 December 2012 .   ^  "speed comparison between CPython and Pypy" . Speed.pypy.org . Retrieved 3 December 2012 .   ^  "Application-level Stackless features — PyPy 2.0.2 documentation" . Doc.pypy.org . Retrieved 17 July 2013 .   ^  "Plans for optimizing Python" . Google Project Hosting . Google. 15 December 2009 . Retrieved 24 September 2011 .   ^  "Python on the Nokia N900" . Stochastic Geometry .   ^  "Nuitka Home | Nuitka Home" . nuitka.net . Retrieved 18 August 2017 .   ^  Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code . European Conference on Python in Science (EuroSciPy). arXiv : 1404.6388  . Bibcode : 2014arXiv1404.6388M .   ^ a  b  Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). "PEP 1 – PEP Purpose and Guidelines" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 April 2011 .   ^  Cannon, Brett. "Guido, Some Guys, and a Mailing List: How Python is Developed" . python.org . Python Software Foundation. Archived from the original on 1 June 2009 . Retrieved 27 June 2009 .   ^  "Python Developer's Guide" .   ^  Norwitz, Neal (8 April 2002). "[Python-Dev] Release Schedules (was Stability & change)" . Retrieved 27 June 2009 .   ^  Aahz; Baxter, Anthony (15 March 2001). "PEP 6 – Bug Fix Releases" . Python Enhancement Proposals . Python Software Foundation . Retrieved 27 June 2009 .   ^  "Python Buildbot" . Python Developer’s Guide . Python Software Foundation . Retrieved 24 September 2011 .   ^  DeBill, Erik. "Module Counts" . www.modulecounts.com . Retrieved 20 August 2016 .   ^ a  b  "Whetting Your Appetite" . The Python Tutorial . Python Software Foundation . Retrieved 20 February 2012 .   ^  "In Python, should I use else after a return in an if block?" . Stack Overflow . Stack Exchange. 17 February 2011 . Retrieved 6 May 2011 .   ^  Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming . O'Reilly Media, Inc. p. 17. ISBN  9781449379322 .   ^  Fehily, Chris (2002). Python . Peachpit Press. p. xv. ISBN  9780201748840 .   ^  "TIOBE Index" . TIOBE - The Software Quality Company . Retrieved 7 March 2017 .   ^  TIOBE Software Index (2015). "TIOBE Programming Community Index Python" . Retrieved 10 September 2015 .   ^  Prechelt, Lutz (14 March 2000). "An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl"  (PDF) . Retrieved 30 August 2013 .   ^  "Quotes about Python" . Python Software Foundation . Retrieved 8 January 2012 .   ^  "Organizations Using Python" . Python Software Foundation . Retrieved 15 January 2009 .   ^  "Python : the holy grail of programming" . CERN Bulletin . CERN Publications (31/2006). 31 July 2006 . Retrieved 11 February 2012 .   ^  Shafer, Daniel G. (17 January 2003). "Python Streamlines Space Shuttle Mission Design" . Python Software Foundation . Retrieved 24 November 2008 .   ^  "Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers" . Facebook for Developers . Retrieved 2018-06-19 .   ^  Fortenberry, Tim (17 January 2003). "Industrial Light & Magic Runs on Python" . Python Software Foundation . Retrieved 11 February 2012 .   ^  Taft, Darryl K. (5 March 2007). "Python Slithers into Systems" . eWeek.com . Ziff Davis Holdings . Retrieved 24 September 2011 .   ^  "Usage statistics and market share of Python for websites" . 2012 . Retrieved 18 December 2012 .   ^  Oliphant, Travis (2007). "Python for Scientific Computing" . Computing in Science and Engineering .   ^  Millman, K. Jarrod; Aivazis, Michael (2011). "Python for Scientists and Engineers" . Computing in Science and Engineering . 13 (2): 9–12.   ^  "Installers for GIMP for Windows - Frequently Asked Questions" . 26 July 2013. Archived from the original on 17 July 2013 . Retrieved 26 July 2013 .   ^  "jasc psp9components" . Archived from the original on 19 March 2008.   ^  "About getting started with writing geoprocessing scripts" . ArcGIS Desktop Help 9.2 . Environmental Systems Research Institute. 17 November 2006 . Retrieved 11 February 2012 .   ^  CCP porkbelly (24 August 2010). "Stackless Python 2.7" . EVE Community Dev Blogs . CCP Games . As you may know, EVE has at its core the programming language known as Stackless Python.   ^  Caudill, Barry (20 September 2005). "Modding Sid Meier's Civilization IV" . Sid Meier's Civilization IV Developer Blog . Firaxis Games . Archived from the original on 11 August 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.   ^  "Python Language Guide (v1.0)" . Google Documents List Data API v1.0 . Google. Archived from the original on 11 August 2010.   ^  "Python - Best Programming Language for Algorithmic Trading Systems" . 9 March 2016 . Retrieved 3 October 2016 .   ^  "Trading with Interactive Brokers using Python: An IBPy Tutorial" . 19 September 2016 . Retrieved 3 October 2016 .   ^  "Python for Artificial Intelligence" . Wiki.python.org. 19 July 2012. Archived from the original on 1 November 2012 . Retrieved 3 December 2012 .   ^  Paine, Jocelyn, ed. (August 2005). "AI in Python" . AI Expert Newsletter . Amzi! . Retrieved 11 February 2012 .   ^  "PyAIML 0.8.5 : Python Package Index" . Pypi.python.org . Retrieved 17 July 2013 .   ^  Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. p. 1062. ISBN  978-0-13-604259-4 . Retrieved 11 February 2012 .   ^  "Natural Language Toolkit" .   ^  "Immunity: Knowing You're Secure" . Archived from the original on 16 February 2009.   ^  "Corelabs site" .   ^  "What is Sugar?" . Sugar Labs . Retrieved 11 February 2012 .   ^  "4.0 New Features and Fixes" . LibreOffice.org . The Document Foundation . 2013 . Retrieved 25 February 2013 .   ^  "Gotchas for Python Users" . boo.codehaus.org . Codehaus Foundation. Archived from the original on 11 December 2008 . Retrieved 24 November 2008 .   ^  Esterbrook, Charles. "Acknowledgements" . cobra-language.com . Cobra Language . Retrieved 7 April 2010 .   ^  Esterbrook, Charles. "Comparison to Python" . cobra-language.com . Cobra Language . Retrieved 7 April 2010 .   ^  "Proposals: iterators and generators [ES4 Wiki]" . wiki.ecmascript.org. Archived from the original on 20 October 2007 . Retrieved 24 November 2008 .   ^  Kincaid, Jason (10 November 2009). "Google's Go: A New Programming Language That's Python Meets C++" . TechCrunch . Retrieved 29 January 2010 .   ^  Strachan, James (29 August 2003). "Groovy – the birth of a new dynamic language for the Java platform" .   ^  "Working with the Command Line Compiler - Kotlin Programming Language" . Kotlin . Retrieved 12 March 2018 .   ^  "An Interview with the Creator of Ruby" . Linuxdevcenter.com . Retrieved 3 December 2012 .   ^  Lattner, Chris (3 June 2014). "Chris Lattner's Homepage" . Chris Lattner . Retrieved 3 June 2014 . I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.   ^  Kupries, Andreas; Fellows, Donal K. (14 September 2000). "TIP #3: TIP Format" . tcl.tk . Tcl Developer Xchange . Retrieved 24 November 2008 .   ^  Gustafsson, Per; Niskanen, Raimo (29 January 2007). "EEP 1: EEP Purpose and Guidelines" . erlang.org . Retrieved 19 April 2011 .   ^  "TIOBE Programming Community Index for March 2012" . TIOBE Software. March 2012 . Retrieved 25 March 2012 .     Further reading [ edit ]   Downey, Allen B. (May 2012). Think Python: How to Think Like a Computer Scientist (Version 1.6.6 ed.). ISBN  978-0-521-72596-5 .   Hamilton, Naomi (5 August 2008). "The A-Z of Programming Languages: Python" . Computerworld . Archived from the original on 29 December 2008 . Retrieved 31 March 2010 .   Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN  978-0-596-15806-4 .   Pilgrim, Mark (2004). Dive Into Python . Apress. ISBN  978-1-59059-356-1 .   Pilgrim, Mark (2009). Dive Into Python 3 . Apress. ISBN  978-1-4302-2415-0 . Archived from the original on 2011-10-17.   Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN  978-0-321-68056-3 .    External links [ edit ]   Find more about Python (programming language) at Wikipedia's sister projects   Media from Wikimedia Commons  Quotations from Wikiquote  Textbooks from Wikibooks  Learning resources from Wikiversity     Official website  Python at Curlie (based on DMOZ )         v  t  e    Programming languages        Comparison  Timeline  History          APL  Assembly  BASIC  C  C++  C#  COBOL  Fortran  Go  Groovy  Haskell  Java  JavaScript (JS)  Lisp  Lua  Objective-C  Pascal  Perl  PHP  Python  Ruby  Shell  Smalltalk  Swift  Visual Basic .NET (VB.NET)  more...           Category   Lists   Alphabetical  Categorical  Generational  Non-English-based                v  t  e    Python     Implementations     CircuitPython  CLPython  CPython  Cython  MicroPython  Numba  IronPython  Jython  Psyco  PyPy  Python for S60  Shed Skin  Stackless Python  Unladen Swallow  more ...          IDE     Boa  Eric Python IDE  IDLE  PyDev  SPE  Ninja-IDE  more ...       Topics     WSGI          software (list)  Python Software Foundation  PyCon              v  t  e    Python  web frameworks        BlueBream  Bottle  CherryPy  Django  Flask  Grok  Nagare  Nevow  Pyjs  Pylons  Pyramid  Quixote  Spyce  TACTIC  Tornado  TurboGears  TwistedWeb  Webware  web2py  Zope 2  more ...              v  t  e    Free and open-source software     General     Alternative terms for free software  Comparison of open-source and closed-source software  Comparison of source code hosting facilities  Free software  Free software project directories  Gratis versus libre  Long-term support  Open-source software  Open-source software development  Outline       Software packages     Audio  Bioinformatics  Codecs  Collaboration  Configuration management  Device drivers   Graphics  Wireless    Geophysics  Health  Mathematics  Operating systems  Programming languages  Routing  Statistics  Television  Video games  Web applications   Content management systems  E-commerce    Word processors  Android apps  iOS apps  Commercial  Trademarked  Formerly proprietary       Community     Free software movement  History  Open-source software movement  Organizations  Events       Licenses     AFL  Apache  APSL  Artistic  Beerware  Boost  BSD  CC0  CDDL  EPL  Free Software Foundation   GNU GPL  GNU LGPL    ISC  MIT  MPL  Ms-PL/RL  Python  Python Software Foundation License  Sleepycat  Unlicense  WTFPL  zlib      Types and standards     Comparison of free and open-source software licenses  Contributor License Agreement  Copyleft  Debian Free Software Guidelines  Definition of Free Cultural Works  Free license  The Free Software Definition  The Open Source Definition  Open-source license  Permissive software licence  Public domain  Viral license          Challenges     Binary blob  Digital rights management  Hardware restrictions  License proliferation  Mozilla software rebranding  Proprietary software  SCO/Linux controversies  Secure boot  Software patents  Software security  Trusted Computing       Related topics     GNU Manifesto  The Cathedral and the Bazaar  Forking  Microsoft Open Specification Promise  Open-source hardware  Revolution OS           Book   Category   Commons   Portal           Authority control     BNF : cb13560465c  (data)  GND : 4434275-5  LCCN : sh96008834  SUDOC : 051626225             Retrieved from " https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=847572033 "  Categories : Programming languages Class-based programming languages Computational notebook Computer science in the Netherlands Cross-platform free software Dutch inventions Dynamically typed programming languages Educational programming languages High-level programming languages Information technology in the Netherlands Object-oriented programming languages Programming languages created in 1991 Python (programming language) Scripting languages Text-oriented programming languages Cross-platform software Hidden categories: All articles with unsourced statements Articles with unsourced statements from October 2017 Wikipedia articles needing clarification from May 2018 Articles with unsourced statements from May 2018 Articles containing potentially dated statements from March 2018 All articles containing potentially dated statements Articles containing potentially dated statements from August 2016 Articles containing potentially dated statements from January 2018 Articles with unsourced statements from March 2018 Articles with Curlie links Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Wikipedia articles with SUDOC identifiers Good articles Use dmy dates from August 2015      Navigation menu    Personal tools   Not logged in Talk Contributions Create account Log in      Namespaces   Article Talk       Variants           Views   Read Edit View history      More         Search              Navigation    Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store      Interaction    Help About Wikipedia Community portal Recent changes Contact page      Tools    What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page      Print/export    Create a book Download as PDF Printable version      In other projects    Wikimedia Commons Wikibooks Wikiquote Wikiversity      Languages    Afrikaans Alemannisch العربية Aragonés অসমীয়া Asturianu Azərbaycanca تۆرکجه বাংলা Bân-lâm-gú Беларуская Български Bosanski Català Cebuano Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego ગુજરાતી 한국어 Հայերեն हिन्दी Hrvatski Bahasa Indonesia Interlingua Íslenska Italiano עברית ქართული Қазақша Кыргызча Latina Latviešu Lietuvių La .lojban. Lumbaart Magyar Македонски മലയാളം मराठी Bahasa Melayu Монгол မြန်မာဘာသာ Nederlands नेपाली 日本語 Norsk Norsk nynorsk ଓଡ଼ିଆ Oʻzbekcha/ўзбекча پنجابی ភាសាខ្មែរ Plattdüütsch Polski Português Română Русский Scots Shqip සිංහල Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Tagalog தமிழ் తెలుగు ไทย Тоҷикӣ Türkçe ᨅᨔ ᨕᨘᨁᨗ Українська اردو Tiếng Việt 吴语 粵語 中文   Edit links        This page was last edited on 26 June 2018, at 09:19 (UTC) .  Text is available under the Creative Commons Attribution-ShareAlike License ;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.    Privacy policy  About Wikipedia  Disclaimers  Contact Wikipedia  Developers  Cookie statement  Mobile view              